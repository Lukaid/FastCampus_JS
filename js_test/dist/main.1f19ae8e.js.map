{"version":3,"sources":["getType.js","getRandom.js","main.js"],"names":["getType","data","Object","prototype","toString","call","slice","random","Math","floor","sum","x","y","sum_2","console","log","a","b","test","arguments"],"mappings":";;AEAA;;AACA;;;ADDe,ADAA,SCASO,ADAAP,MCAT,CDAA,CAAkBC,CCAA,GDAlB,EAAwB;ACCnC,ADAF,AEEF,SDFWO,ADAFN,ICAM,CAACO,CDAD,CAACN,GCAL,CAAWK,IAAI,CAACD,ADAlB,CAAiBH,KCAJ,GDAb,CAA0BC,CCAG,EAA3B,CAAP,ADAK,CAA+BJ,IAA/B,EAAqCK,KAArC,CAA2C,CAA3C,EAA8C,CAAC,CAA/C,CAAP;ACCD,ADAA,AEED;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA,SAASI,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACjB,SAAOD,CAAC,GAAGC,CAAX;AACD,EAED;;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAUF,CAAV,EAAaC,CAAb,EAAgB;AAC5B,SAAOD,CAAC,GAAGC,CAAX;AACD,CAFD;;AAIAE,OAAO,CAACC,GAAR,CAAYL,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAH,GAAYA,GAAG,CAAC,CAAD,EAAI,EAAJ,CAA3B;AAEA,IAAMM,CAAC,GAAGN,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA,IAAMO,CAAC,GAAGP,GAAG,CAAC,CAAD,EAAI,EAAJ,CAAb;AAEAI,OAAO,CAACC,GAAR,CAAYC,CAAC,GAAGC,CAAhB;AAEAH,OAAO,CAACC,GAAR,CAAYF,KAAK,CAAC,CAAD,EAAI,CAAJ,CAAjB;;AAEA,SAASK,IAAT,GAAgB;AACdJ,EAAAA,OAAO,CAACC,GAAR,CAAYI,SAAZ;AACA,SAAOA,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAA/B;AACD;;AAEDL,OAAO,CAACC,GAAR,CAAYG,IAAI,CAAC,CAAD,EAAI,CAAJ,CAAhB","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["export default function getType (data) {\r\n  return Object.prototype.toString.call(data).slice(8, -1)\r\n}","export default function random() {\r\n    return Math.floor(Math.random() * 10)\r\n}","import getType from './getType'\r\nimport getRandom from './getRandom'\r\n\r\n// console.log(typeof \"Hello World\")\r\n// console.log(typeof 123)\r\n// console.log(typeof true)\r\n// console.log(typeof undefined)\r\n// console.log(typeof null)\r\n// console.log(typeof {})\r\n// console.log(typeof [])\r\n\r\n// console.log(getType(123))\r\n// console.log(getType(false))\r\n// console.log(getType(null))\r\n// console.log(getType({}))\r\n// console.log(getType([]))\r\n\r\n// 산술연산자\r\n\r\n// console.log(1+2)\r\n// console.log(1-2)\r\n// console.log(1*2)\r\n// console.log(1/2)\r\n// console.log(1%2)\r\n\r\n// 할당연산자\r\n\r\n// const a = 2; // const는 재할당이 불가능\r\n\r\n// let b = 3; // let은 재할당 가능\r\n// b += 1\r\n// b -= 1\r\n// b *= 2\r\n// b /= 3\r\n// b %= 2\r\n\r\n// console.log(a, b)\r\n\r\n// 비교연산자\r\n\r\n// const a = 1\r\n// const b = 3\r\n\r\n// console.log(a === b) // 일치는 세개..?\r\n\r\n// function isEqual(x, y) {\r\n//   return x === y\r\n// }\r\n\r\n// console.log(isEqual(1, 1))\r\n// console.log(isEqual(2, '2'))\r\n\r\n// console.log(a !== b)\r\n\r\n// 논리연산자\r\n\r\n// const a = 1===1\r\n// const b = 'AB'==='AB'\r\n// const c = false\r\n\r\n// console.log(a)\r\n// console.log(b)\r\n// console.log(c)\r\n\r\n// console.log('&& :', a && b)\r\n// console.log('&& :', a && b && c)\r\n// console.log('|| : ', a || b || c)\r\n// console.log('! : ', !a)\r\n\r\n// 삼항연산자\r\n\r\n// const a = 1 < 2\r\n\r\n// if (a) {\r\n//   console.log('참')\r\n// } else {\r\n//   console.log('거짓')\r\n// }\r\n\r\n// console.log(a ? '참' : '거짓')\r\n\r\n// 조건문\r\n\r\n// const a = getRandom()\r\n\r\n// if (a === 0) {\r\n//   console.log('a is 0')\r\n// } else if (a === 2) {\r\n//   console.log('a is 2')\r\n// } else if (a === 4) {\r\n//   console.log('a is 4')\r\n// }else {\r\n//   console.log('rest .. ')\r\n// }\r\n\r\n// // 조건문 switch\r\n\r\n// switch (a) {\r\n//   case 0:\r\n//     console.log('a is 0')\r\n//     break\r\n\r\n//   case 2:\r\n//     console.log('a is 2')\r\n//     break\r\n\r\n//   case 4:\r\n//     console.log('a is 4')\r\n//     break\r\n\r\n//   default:\r\n//     console.log('rest ...')\r\n// }\r\n\r\n// 반복문 \r\n// for (시작조건; 종료조건; 변화조건) {}\r\n// 종료조건이 false면 종료, while문 같은건가?\r\n\r\n// const ulEl = document.querySelector('ul')\r\n\r\n// for (let i = 0; i < 10; i += 1) {\r\n//   const li = document.createElement('li')\r\n//   li.textContent = `list-${i + 1}`\r\n//   if (i % 2 === 1) {\r\n//     li.addEventListener('click', function () {\r\n//       console.log(li.textContent)\r\n//     })\r\n//   }\r\n//   ulEl.appendChild(li)\r\n// }\r\n\r\n\r\n// 변수 유효범위 (Variable Scope)\r\n// var 함수레벨의 유효범위, let, const 블록레벨의 유효범위\r\n// 블록레벨의 유효범위를 만드는 것이 더 효과적임\r\n\r\n// function scope() {\r\n  \r\n//   if (true) {\r\n//     var a = 123\r\n//   }\r\n//   console.log(a)\r\n// }\r\n// scope()\r\n\r\n\r\n// 형 변환\r\n// == 는 동등연산자, 형변환이 일어남, 안쓰는 것을 권장함\r\n\r\n// const a = 1\r\n// const b = '1'\r\n\r\n// console.log(a == b)\r\n\r\n// Truthy(참 같은 값)\r\n// true, {}, [], 1, 2, 'false', -12, '3.14' ...\r\n\r\n// Falsy(거짓 같은 값)\r\n// false, '', null, undefined, 0, -0, NaN\r\n\r\n// if (1) {\r\n//   console.log(123)\r\n// }\r\n\r\n\r\n// 함수 복습\r\n// return후 함수 종료\r\n// 함수 선언, 기명함수\r\nfunction sum(x, y) {\r\n  return x + y\r\n} \r\n\r\n//함수 표현, 익명함수\r\nconst sum_2 = function (x, y) {\r\n  return x + y\r\n} \r\n\r\nconsole.log(sum(1, 3) + sum(4, 12))\r\n\r\nconst a = sum(1, 3)\r\nconst b = sum(4, 12)\r\n\r\nconsole.log(a + b)\r\n\r\nconsole.log(sum_2(1, 2))\r\n\r\nfunction test() {\r\n  console.log(arguments)\r\n  return arguments[0] + arguments[1]\r\n} \r\n\r\nconsole.log(test(7, 3))"]}