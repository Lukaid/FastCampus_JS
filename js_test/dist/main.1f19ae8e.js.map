{"version":3,"sources":["main.js"],"names":["lukaid","firstName","lastName","getFullName","console","log"],"mappingsbC,EAAAA,SAAS,EAAE,UADE;AAEbC,EAAAA,QAAQ,EAAE,KAFG;AAGbC,EAAAA,WAAW,EAAE,uBAAY;AACvB,qBAAU,KAAKF,SAAf,cAA4B,KAAKC,QAAjC;AACD;AALY,CAAf;AAQAE,OAAO,CAACC,GAAR,CAAYL,MAAZ","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["// import getType from './getType'\r\n// import getRandom from './getRandom'\r\n\r\n// console.log(typeof \"Hello World\")\r\n// console.log(typeof 123)\r\n// console.log(typeof true)\r\n// console.log(typeof undefined)\r\n// console.log(typeof null)\r\n// console.log(typeof {})\r\n// console.log(typeof [])\r\n\r\n// console.log(getType(123))\r\n// console.log(getType(false))\r\n// console.log(getType(null))\r\n// console.log(getType({}))\r\n// console.log(getType([]))\r\n\r\n// 산술연산자\r\n\r\n// console.log(1+2)\r\n// console.log(1-2)\r\n// console.log(1*2)\r\n// console.log(1/2)\r\n// console.log(1%2)\r\n\r\n// 할당연산자\r\n\r\n// const a = 2; // const는 재할당이 불가능\r\n\r\n// let b = 3; // let은 재할당 가능\r\n// b += 1\r\n// b -= 1\r\n// b *= 2\r\n// b /= 3\r\n// b %= 2\r\n\r\n// console.log(a, b)\r\n\r\n// 비교연산자\r\n\r\n// const a = 1\r\n// const b = 3\r\n\r\n// console.log(a === b) // 일치는 세개..?\r\n\r\n// function isEqual(x, y) {\r\n//   return x === y\r\n// }\r\n\r\n// console.log(isEqual(1, 1))\r\n// console.log(isEqual(2, '2'))\r\n\r\n// console.log(a !== b)\r\n\r\n// 논리연산자\r\n\r\n// const a = 1===1\r\n// const b = 'AB'==='AB'\r\n// const c = false\r\n\r\n// console.log(a)\r\n// console.log(b)\r\n// console.log(c)\r\n\r\n// console.log('&& :', a && b)\r\n// console.log('&& :', a && b && c)\r\n// console.log('|| : ', a || b || c)\r\n// console.log('! : ', !a)\r\n\r\n// 삼항연산자\r\n\r\n// const a = 1 < 2\r\n\r\n// if (a) {\r\n//   console.log('참')\r\n// } else {\r\n//   console.log('거짓')\r\n// }\r\n\r\n// console.log(a ? '참' : '거짓')\r\n\r\n// 조건문\r\n\r\n// const a = getRandom()\r\n\r\n// if (a === 0) {\r\n//   console.log('a is 0')\r\n// } else if (a === 2) {\r\n//   console.log('a is 2')\r\n// } else if (a === 4) {\r\n//   console.log('a is 4')\r\n// }else {\r\n//   console.log('rest .. ')\r\n// }\r\n\r\n// // 조건문 switch\r\n\r\n// switch (a) {\r\n//   case 0:\r\n//     console.log('a is 0')\r\n//     break\r\n\r\n//   case 2:\r\n//     console.log('a is 2')\r\n//     break\r\n\r\n//   case 4:\r\n//     console.log('a is 4')\r\n//     break\r\n\r\n//   default:\r\n//     console.log('rest ...')\r\n// }\r\n\r\n// 반복문 \r\n// for (시작조건; 종료조건; 변화조건) {}\r\n// 종료조건이 false면 종료, while문 같은건가?\r\n\r\n// const ulEl = document.querySelector('ul')\r\n\r\n// for (let i = 0; i < 10; i += 1) {\r\n//   const li = document.createElement('li')\r\n//   li.textContent = `list-${i + 1}`\r\n//   if (i % 2 === 1) {\r\n//     li.addEventListener('click', function () {\r\n//       console.log(li.textContent)\r\n//     })\r\n//   }\r\n//   ulEl.appendChild(li)\r\n// }\r\n\r\n\r\n// 변수 유효범위 (Variable Scope)\r\n// var 함수레벨의 유효범위, let, const 블록레벨의 유효범위\r\n// 블록레벨의 유효범위를 만드는 것이 더 효과적임\r\n\r\n// function scope() {\r\n  \r\n//   if (true) {\r\n//     var a = 123\r\n//   }\r\n//   console.log(a)\r\n// }\r\n// scope()\r\n\r\n\r\n// 형 변환\r\n// == 는 동등연산자, 형변환이 일어남, 안쓰는 것을 권장함\r\n\r\n// const a = 1\r\n// const b = '1'\r\n\r\n// console.log(a == b)\r\n\r\n// Truthy(참 같은 값)\r\n// true, {}, [], 1, 2, 'false', -12, '3.14' ...\r\n\r\n// Falsy(거짓 같은 값)\r\n// false, '', null, undefined, 0, -0, NaN\r\n\r\n// if (1) {\r\n//   console.log(123)\r\n// }\r\n\r\n\r\n// 함수 복습\r\n// return후 함수 종료\r\n// 함수 선언, 기명함수\r\n// function sum(x, y) {\r\n//   return x + y\r\n// } \r\n\r\n// //함수 표현, 익명함수\r\n// const sum_2 = function (x, y) {\r\n//   return x + y\r\n// } \r\n\r\n// console.log(sum(1, 3) + sum(4, 12))\r\n\r\n// const a = sum(1, 3)\r\n// const b = sum(4, 12)\r\n\r\n// console.log(a + b)\r\n\r\n// console.log(sum_2(1, 2))\r\n\r\n// function test() {\r\n//   console.log(arguments)\r\n//   return arguments[0] + arguments[1]\r\n// } \r\n\r\n// console.log(test(7, 3))\r\n\r\n\r\n// 화살표 함수\r\n// () => {} vs function () {}\r\n\r\n// const double = function (x) {\r\n//   return x * 2\r\n// }\r\n// console.log('double: ', double(7))\r\n\r\n// const doubleArrow = (x, y) => x * 2 + y\r\n// console.log('doubleArrow: ', doubleArrow(7, 2))\r\n\r\n// 즉시 실행 함수\r\n// IIFE, Immediately-Invoked Function Expression\r\n\r\n// const a = 7\r\n// function double() {\r\n//   console.log(a*2)\r\n// }\r\n\r\n// double();\r\n\r\n// // (function) ()\r\n// (function () {\r\n//   console.log(a*2)\r\n// }) ();\r\n\r\n// // (function () ) 권장\r\n// (function () {\r\n//   console.log(a*2)\r\n// } () );\r\n\r\n// 호이스팅 (Hoisting)\r\n// 함수 선언부가 유효범위 최상단으로 끌어올려지는 현상\r\n// 걍 함수먼저 읽고 나머지 읽는듯\r\n\r\n// const a = 7\r\n\r\n// double()\r\n\r\n// function double () {\r\n//   console.log(a*2)\r\n// }\r\n\r\n// 타이머함수\r\n// setTimeout(함수, 시간): 일정 시간 후 함수 실행, ms\r\n// setInterval(함수, 시간): 시간 간격마다 함수 실행\r\n// clearTimeout(): 설정된 Timeout 함수를 종료\r\n// clearInterval(): 설정된 Interval 함수를 종료\r\n\r\n// const timer = setInterval(() => {\r\n//   console.log('Lukaid')\r\n// }, 1000)\r\n\r\n// const h1El = document.querySelector('h1')\r\n// h1El.addEventListener('click', () => {\r\n//   clearInterval(timer)\r\n// })\r\n\r\n\r\n// 콜백\r\n// 함수의 인수로 사용되는 함수\r\n\r\n// setTimeout(함수, 시간)\r\n\r\n// function timeout(callback) {\r\n//   setTimeout(() => {\r\n//     console.log('Lukaid!')\r\n//     callback()\r\n//   }, 3000)\r\n// }\r\n\r\n// timeout(()=>{\r\n//   console.log('Done!')\r\n// })\r\n\r\n\r\n// 생성자 함수\r\n\r\nconst lukaid = {\r\n  firstName: 'SeongWoo',\r\n  lastName: 'Lee',\r\n  getFullName: function () {\r\n    return `${this.firstName} ${this.lastName}`\r\n  }\r\n}\r\n\r\nconsole.log(lukaid)\r\n"]}